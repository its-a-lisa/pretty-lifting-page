// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vqQvWe7o4hyh6y1qHSdfJm
// Component: 2GCgUXo3zL3x

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: vqQvWe7o4hyh6y1qHSdfJm/projectcss
import sty from "./PlasmicScreen.module.css"; // plasmic-import: 2GCgUXo3zL3x/css

createPlasmicElementProxy;

export type PlasmicScreen__VariantMembers = {
  mirrored: "mirrored";
};
export type PlasmicScreen__VariantsArgs = {
  mirrored?: SingleBooleanChoiceArg<"mirrored">;
};
type VariantPropType = keyof PlasmicScreen__VariantsArgs;
export const PlasmicScreen__VariantProps = new Array<VariantPropType>(
  "mirrored"
);

export type PlasmicScreen__ArgsType = {
  numberOfPlatform?: string;
  video?: React.ComponentProps<typeof PlasmicImg__>["src"];
  intakeLifters?: any;
};
type ArgPropType = keyof PlasmicScreen__ArgsType;
export const PlasmicScreen__ArgProps = new Array<ArgPropType>(
  "numberOfPlatform",
  "video",
  "intakeLifters"
);

export type PlasmicScreen__OverridesType = {
  root?: Flex__<"div">;
  span?: Flex__<"span">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultScreenProps {
  numberOfPlatform?: string;
  video?: React.ComponentProps<typeof PlasmicImg__>["src"];
  intakeLifters?: any;
  mirrored?: SingleBooleanChoiceArg<"mirrored">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicScreen__RenderFunc(props: {
  variants: PlasmicScreen__VariantsArgs;
  args: PlasmicScreen__ArgsType;
  overrides: PlasmicScreen__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          video: {
            src: "/plasmic/website_starter/images/victorFreitasCQwNdMxwjfkUnsplashJpg.jpg",
            fullWidth: 5184,
            fullHeight: 3456,
            aspectRatio: undefined
          },
          intakeLifters: [
            {
              name: "Abigail Bossy",
              team: "Iron Resolve Powerlifting",
              "best lift": "Squat: 115 kg (253.53 lbs)",
              competition: "Women's Raw Open 72 kg",
              onScreen: true
            },
            {
              name: "Kava Kumar",
              team: "Elite Force Fitness",
              "best lift": "Deadlift: 140 kg (308.65 lbs)",
              competition: "Women's Raw Junior 63 kg",
              onScreen: false
            },
            {
              name: "Abby Pieces",
              team: "Steel Titans Club",
              "best lift": "Bench Press: 85 kg (187.39 lbs)",
              competition: "Women's Raw Open 84 kg",
              onScreen: false
            },
            {
              name: "Diane John",
              team: "Victory Barbell",
              "best lift": "Deadlift: 155 kg (341.72 lbs)",
              competition: "Women's Raw Master 1 76 kg",
              onScreen: false
            }
          ]
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "mirrored",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.mirrored
      },
      {
        path: "currentLifter",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.intakeLifters.findIndex(lifter => lifter.onScreen);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootmirrored]: hasVariant($state, "mirrored", "mirrored") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__somNb, {
          [sty.freeBoxmirrored__somNb2XqT]: hasVariant(
            $state,
            "mirrored",
            "mirrored"
          )
        })}
      >
        <h3
          className={classNames(
            projectcss.all,
            projectcss.h3,
            projectcss.__wab_text,
            sty.h3__kr7Dd
          )}
        >
          {"On Deck"}
        </h3>
        <div className={classNames(projectcss.all, sty.freeBox__y0Enn)}>
          <div className={classNames(projectcss.all, sty.freeBox__qdUJf)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $props.intakeLifters;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ywEkf
                  )}
                  key={currentIndex}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              );
            })}
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___3NCd)}>
          <div className={classNames(projectcss.all, sty.freeBox__arCQ)} />
        </div>
        <h3
          className={classNames(
            projectcss.all,
            projectcss.h3,
            projectcss.__wab_text,
            sty.h3__vzszM
          )}
        >
          <React.Fragment>
            <React.Fragment>{"Platform "}</React.Fragment>
            {
              <span
                data-plasmic-name={"span"}
                data-plasmic-override={overrides.span}
                className={classNames(
                  projectcss.all,
                  projectcss.span,
                  projectcss.__wab_text,
                  projectcss.plasmic_default__inline,
                  sty.span
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.numberOfPlatform;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </span>
            }
            <React.Fragment> </React.Fragment>
          </React.Fragment>
        </h3>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__wZkqF)}>
        <div className={classNames(projectcss.all, sty.freeBox__onnyV)}>
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img, {
              [sty.imgmirrored]: hasVariant($state, "mirrored", "mirrored")
            })}
            displayHeight={"560px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"560px"}
            loading={"lazy"}
            src={args.video}
          />
        </div>
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__r9GFg)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([
          2, 3, 4
        ]).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <div
              className={classNames(projectcss.all, sty.freeBox__yvXe)}
              key={currentIndex}
            >
              <div className={classNames(projectcss.all, sty.freeBox__nZBqC)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aYHe
                  )}
                >
                  {"\n"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__f3SHi)} />
            </div>
          );
        })}
      </Stack__>
      <div className={classNames(projectcss.all, sty.freeBox__wRhfN)}>
        <div className={classNames(projectcss.all, sty.freeBox__cwsp3)}>
          <div className={classNames(projectcss.all, sty.freeBox__zIBd7)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__y7INj,
                {
                  [sty.textmirrored__y7INj2XqT]: hasVariant(
                    $state,
                    "mirrored",
                    "mirrored"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.intakeLifters[$state.currentLifter].name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__bFn7)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lJzVz
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.intakeLifters[$state.currentLifter][
                      "best lift"
                    ];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__maHy6)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qgynO
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.intakeLifters[$state.currentLifter].team;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__ckhyd)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2WVl4
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.intakeLifters[$state.currentLifter]
                      .competition;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "span", "img"],
  span: ["span"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  span: "span";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicScreen__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicScreen__VariantsArgs;
    args?: PlasmicScreen__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicScreen__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicScreen__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicScreen__ArgProps,
          internalVariantPropNames: PlasmicScreen__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicScreen__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicScreen";
  } else {
    func.displayName = `PlasmicScreen.${nodeName}`;
  }
  return func;
}

export const PlasmicScreen = Object.assign(
  // Top-level PlasmicScreen renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    span: makeNodeComponent("span"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicScreen
    internalVariantProps: PlasmicScreen__VariantProps,
    internalArgProps: PlasmicScreen__ArgProps
  }
);

export default PlasmicScreen;
/* prettier-ignore-end */
